{"version":3,"sources":["BETSDATA.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WALLET_TYPE","CYCLE_TYPE","INTENSITY_TYPE","BETS","type","last","code","cycle","weekly","intensity","low","most","monthly","roulette","globalbets","App","updateHtmlComponents","betList","counter","length","testUndefined","blockdata","undefined","balance","$","text","title","subtitle","bgColor","textColor","font","video","className","onClick","Object","values","forEach","cycleValue","fadeToggle","toggleClass","hasClass","id","bets","localBets","axios","get","then","response","data","localBlock","push","bet","textParseResult","intensityValue","betTypeText","betCycleText","medium","daily","betTextParser","isRoulette","setTimeout","data-bettype","data-betintensity","data-betcycle","href","target","value","size","betRenderer","betsRenderer","bg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0MACYA,EAOAC,EAMAC,E,kGAbAF,O,eAAAA,I,eAAAA,I,uBAAAA,I,kBAAAA,M,cAOAC,O,iBAAAA,I,mBAAAA,I,sBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,gBAAAA,M,KA0BL,IAAMC,EAAmB,CAC9B,CACAC,KAAKJ,EAAYK,KACjBC,KAAK,qCACLC,MAAMN,EAAWO,OACjBC,UAAUP,EAAeQ,KACzB,CACAN,KAAKJ,EAAYW,KACjBL,KAAK,qCACLC,MAAMN,EAAWO,OACjBC,UAAUP,EAAeQ,KACzB,CACAN,KAAKJ,EAAYK,KACjBC,KAAK,qCACLC,MAAMN,EAAWW,QACjBH,UAAUP,EAAeQ,KACzB,CACAN,KAAKJ,EAAYW,KACjBL,KAAK,qCACLC,MAAMN,EAAWW,QACjBH,UAAUP,EAAeQ,KACzB,CACAN,KAAKJ,EAAYa,SACjBP,KAAK,qCACLC,MAAMN,EAAWO,OACjBC,UAAUP,EAAeQ,KACzB,CACAN,KAAKJ,EAAYa,SACjBP,KAAK,qCACLC,MAAMN,EAAWW,QACjBH,UAAUP,EAAeQ,M,kCC5DvBI,EAAwB,GA2IbC,MAzIf,WAEE,SAASC,EAAqBC,GAC5B,IAAI,IAAIC,EAAQ,EAAEA,EAAQD,EAAQE,SAASD,EAAQ,CACjD,IAAIE,EAAiBH,EAAQC,GAASG,UACtC,QAAsBC,IAAlBF,EAA4B,CAEhC,IAAIG,EAAkC,KAAxBH,EAAcG,QAE5BC,IAAE,WAAWP,EAAQC,GAASZ,MAAMmB,KAAKF,EAAU,UA2GvD,OACA,6BACE,kBAAC,IAAD,CACIG,MAAM,kBACNC,SAAS,mCACTC,QAAQ,UACRC,UAAU,UACVC,KAAK,UACLC,MAAM,cAEV,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,iBACb,4BAAQC,QA/Bd,WACEC,OAAOC,OAAOlC,GAAYmC,SAAQ,SAACC,GAC9BpC,EAAWO,QAAU6B,IACtBb,IAAE,oBAAoBa,EAAW,MAAMC,WAAW,QAElDd,IAAE,UAAUvB,EAAWO,QAAQ+B,YAAY,UACxCf,IAAE,UAAUvB,EAAWO,QAAQgC,SAAS,UAEzChB,IAAE,UAAUvB,EAAWO,QAAQiB,KAAK,wBAEpCD,IAAE,UAAUvB,EAAWO,QAAQiB,KAAK,6CAK1CD,IAAE,UAAUc,WAAW,SAgBWN,UAAU,UAAUS,GAAI,SAASxC,EAAWO,QAA1E,2CAlHN,SAAsBkC,GAEpB,IADA,IAAIC,EAAkB,GADe,WAE7BzB,GACN0B,IAAMC,IAAI,4EAAgFH,EAAKxB,GAASZ,MACvGwC,MAAK,SAACC,GACL,IAAIC,EAAOD,EAASC,KAAKA,KACrBC,EAAaP,EAAKxB,GACtB+B,EAAW5B,UAAY2B,EACvBlC,EAAWoC,KAAKD,GAChBjC,EAAqBF,MAEvB6B,EAAUO,KAsCd,SAAqBC,GACnB,IAAIC,EAlCN,SAAuBD,GACrB,IAAIE,EAAiB,EACjBC,EAAc,GACdC,EAAe,GAGjBF,EADCF,EAAI1C,YAAcP,EAAeQ,IACjB,KACVyC,EAAI1C,YAAcP,EAAesD,OACvB,KAEA,IAIjBF,EADCH,EAAI/C,OAASJ,EAAYK,KACZ,gCACP8C,EAAI/C,OAASJ,EAAYW,KAClB,mCACPwC,EAAI/C,OAASJ,EAAYa,SAClB,UAEA,QAId0C,EADCJ,EAAI5C,QAASN,EAAWwD,MACV,SACRN,EAAI5C,QAASN,EAAWO,OAChB,UAEA,SAEjB,MAAO,CAAC6C,iBAAeC,cAAYC,gBAIbG,CAAcP,GAChCQ,GAAa,EAEdR,EAAI/C,OAASJ,EAAYa,WAC1B8C,GAAa,GAOf,OAJAC,YAAW,WACT5C,EAAqBF,KACpB,KAGH,uBAAGkB,UAAW,OAAQ6B,eAAcV,EAAI/C,KAAO0D,oBAAmBX,EAAI1C,UAAWsD,gBAAeZ,EAAI5C,OAClG,2BAAG,2BAAI6C,EAAgBE,cACvB,kDACE,uBAAGb,GAAI,UAAUU,EAAI7C,OACpBqD,EAAW,oCAAE,6BAAF,kCAAyC,MAEvD,sDAA2B,2BAAIP,EAAgBG,eAE/C,yBAAKvB,UAAU,qBACb,uBAAGgC,KAAM,0CAA0Cb,EAAI7C,KAAO2D,OAAO,UACnE,yBAAKjC,UAAW,aACd,kBAAC,IAAD,CAAQkC,MAAOf,EAAI7C,KAAM6D,KAAM,QAGrC,2BAAG,uBAAGH,KAAM,0CAA0Cb,EAAI7C,KAAO2D,OAAO,UAAUd,EAAI7C,OACtF,qDAA0B,2BAAI8C,EAAgBC,eAApB,UAlEXe,CAAY1B,EAAKxB,MAT1BA,EAAQ,EAAEA,EAAQwB,EAAKvB,SAASD,EAAS,EAAzCA,GAWR,OAAOyB,EAuGJ0B,CAAalE,IAEhB,kBAAC,IAAD,CAAaC,KAAK,SAASkE,IAAI,MCpIfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf81e2e2.chunk.js","sourcesContent":["\nexport enum WALLET_TYPE{\n  most,\n  last,\n  roulette,\n  other\n}\n\nexport enum CYCLE_TYPE{\n  daily,\n  weekly,\n  monthly\n}\n\nexport enum INTENSITY_TYPE{\n  low,\n  medium,\n  high\n}\n\nexport interface BlockData{\n  address: string,\n  balance: number,\n  received:  number,\n  sent:  number,\n  tx_count:  number,\n  unconfirmed_received:  number,\n  unconfirmed_sent:  number,\n  unconfirmed_tx_count:  number,\n  unspent_tx_count:  number\n}\n\nexport interface BitWallet{\n  type:WALLET_TYPE,\n  code:string,\n  cycle:CYCLE_TYPE,\n  intensity:INTENSITY_TYPE,\n  blockdata?:BlockData\n}\n\nexport const BETS: BitWallet[] =[\n  {\n  type:WALLET_TYPE.last,\n  code:\"1M78yT7d9csaESjdzFX5HcLSsF1NmNnx9c\",\n  cycle:CYCLE_TYPE.weekly,\n  intensity:INTENSITY_TYPE.low,\n},{\n  type:WALLET_TYPE.most,\n  code:\"17DrM9sAcMTiHXLjT1nqDyMCNoQ1muKz43\",\n  cycle:CYCLE_TYPE.weekly,\n  intensity:INTENSITY_TYPE.low,\n},{\n  type:WALLET_TYPE.last,\n  code:\"159LzmYaZbwZ4kK3YqWPsMWcWBEVPnrC3G\",\n  cycle:CYCLE_TYPE.monthly,\n  intensity:INTENSITY_TYPE.low,\n},{\n  type:WALLET_TYPE.most,\n  code:\"1DivT9V2UEZd5Cdpf4FWVuGnak7fUCKfuV\",\n  cycle:CYCLE_TYPE.monthly,\n  intensity:INTENSITY_TYPE.low,\n},{\n  type:WALLET_TYPE.roulette,\n  code:\"1L2EvMEdJtbY3YnCBdvWyq314ACP5VKARw\",\n  cycle:CYCLE_TYPE.weekly,\n  intensity:INTENSITY_TYPE.low,\n},{\n  type:WALLET_TYPE.roulette,\n  code:\"1F58nuq5zmmXYDp8EeYPkXrNsZtpfinxhZ\",\n  cycle:CYCLE_TYPE.monthly,\n  intensity:INTENSITY_TYPE.low,\n}\n\n]","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport $ from \"jquery\"; \nimport ParticlesBg,{TypeProp} from 'particles-bg'\nimport {BitWallet, BETS,INTENSITY_TYPE,WALLET_TYPE,CYCLE_TYPE} from './BETSDATA'\nimport QRCode from 'react-qr-code';\nimport FullHeader from 'full-header-comp';\n\n\nlet globalbets:BitWallet[] =[]\n\nfunction App() {\n\n  function updateHtmlComponents(betList: BitWallet[]){\n    for(let counter=0;counter<betList.length;++counter){\n      let testUndefined =  betList[counter].blockdata\n      if( testUndefined !== undefined){\n\n      let balance = testUndefined.balance * 0.000008\n\n      $(\"#balance\"+betList[counter].code).text(balance + \" BTC\")\n      }\n    }\n  }\n\n  function betsRenderer(bets:BitWallet[]){\n    let localBets:any[] = [];\n    for(let counter=0;counter<bets.length;++counter){\n      axios.get('https://cors-anywhere.herokuapp.com/' +'https://chain.api.btc.com/v3/address/'+bets[counter].code)\n      .then((response) => {\n        let data = response.data.data\n        let localBlock = bets[counter]\n        localBlock.blockdata = data\n        globalbets.push(localBlock)\n        updateHtmlComponents(globalbets)\n      })\n      localBets.push(betRenderer(bets[counter]));\n    }\n    return localBets;\n  }\n\n  function betTextParser(bet:BitWallet){\n    let intensityValue = 0;\n    let betTypeText = \"\"\n    let betCycleText = \"\"\n\n    if(bet.intensity === INTENSITY_TYPE.low){\n      intensityValue = 0.001\n    }else if(bet.intensity === INTENSITY_TYPE.medium){\n      intensityValue = 0.005\n    }else{\n      intensityValue = 0.05\n    }\n\n    if(bet.type === WALLET_TYPE.last){\n      betTypeText = \"Quem apostar por ultimo ganha\"\n    }else if(bet.type === WALLET_TYPE.most){\n      betTypeText = \"Quem transferir mais (BTC) ganha\"\n    }else if(bet.type === WALLET_TYPE.roulette){\n      betTypeText = \"Roleta!\"\n    }else{\n      betTypeText = \"outro\"\n    }\n    \n    if(bet.cycle ===CYCLE_TYPE.daily){\n      betCycleText = \"diaria\"\n    }else if(bet.cycle ===CYCLE_TYPE.weekly){\n      betCycleText = \"semanal\"\n    }else{\n      betCycleText = \"mensal\"\n    }\n    return {intensityValue,betTypeText,betCycleText}\n  }\n\n  function betRenderer(bet:BitWallet){\n    let textParseResult = betTextParser(bet);\n    let isRoulette = false\n\n    if(bet.type === WALLET_TYPE.roulette){\n      isRoulette = true\n    }\n\n    setTimeout(()=>{\n      updateHtmlComponents(globalbets)\n    }, 1000);\n\n    return(\n    <a className={\"card\"} data-bettype={bet.type}  data-betintensity={bet.intensity} data-betcycle={bet.cycle}>\n      <p><b>{textParseResult.betTypeText}</b></p>\n      <p>Recompensa atual&nbsp;\n        <b id={\"balance\"+bet.code}></b>\n        {isRoulette?<><br/>(dividido entre os vencedores)</>:null}\n      </p>\n      <p>Ciclo de vida da aposta <b>{textParseResult.betCycleText}</b></p>\n\n      <div className=\"qrholdercontainer\">\n        <a href={\"https://www.blockchain.com/btc/address/\"+bet.code}  target=\"_blank\">\n          <div className={\"qrholder\"}/> \n            <QRCode value={bet.code} size={200} />\n          </a>\n      </div>\n      <p><a href={\"https://www.blockchain.com/btc/address/\"+bet.code}  target=\"_blank\">{bet.code}</a></p>\n      <p>Valor minimo da aposta <b>{textParseResult.intensityValue} BTC</b></p>\n    \n    </a>\n    )\n  }\n\n  function cycleFilter(){\n    Object.values(CYCLE_TYPE).forEach((cycleValue) => {\n      if(CYCLE_TYPE.weekly != cycleValue){\n        $(\"[data-betcycle|='\"+cycleValue+\"']\").fadeToggle(\"slow\")\n               \n        $(\"#filter\"+CYCLE_TYPE.weekly).toggleClass(\"active\")\n        if($(\"#filter\"+CYCLE_TYPE.weekly).hasClass(\"active\")){\n        \n          $(\"#filter\"+CYCLE_TYPE.weekly).text(\"Ver todas as apostas\")\n        }else{\n          $(\"#filter\"+CYCLE_TYPE.weekly).text(\"Ver apostas que terminam essa semana!\")\n        }\n      }\n    });\n    \n    $(\"header\").fadeToggle(\"slow\")\n\n  }\n\n  return (\n  <div>\n    <FullHeader\n        title=\"Aposte bitcoins\"\n        subtitle=\"APOSTE NA LIBERDADE COMO NÃ“S!\"\n        bgColor=\"#EBE9EB\"\n        textColor=\"#3299BB\"\n        font=\"Lobster\"\n        video=\"video.mp4\"/*if dev, add +'site/'*/\n    />\n    <div className=\"App container\">\n      <div className=\"filter-holder\">\n        <button onClick={cycleFilter} className=\"overlap\" id={\"filter\"+CYCLE_TYPE.weekly} > Ver apostas que terminam essa semana!</button>\n      </div>\n      {betsRenderer(BETS)}          \n    </div>\n    <ParticlesBg type=\"random\" bg={true} />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}